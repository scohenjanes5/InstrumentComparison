%% Setup
chosenFolder="C:\Users\sande\Desktop\school\Senior Spring\Math and Music\InstrumentComparison\Recordings";
audioFiles = dir(fullfile(chosenFolder, '*.wav'));
ads = audioDatastore(fullfile(chosenFolder, {'**/Notes'}), ...
    'FileExtensions', '.wav');
fileNames = ads.Files;

% Extract labels from filenames and add them to the datastore
for i = 1:numel(ads.Files)
    [~, filename, ~] = fileparts(ads.Files{i});
    parentdir = extractAfter(fileparts(ads.Files{i}), 'Recordings\');
    parentdir = extractBefore(parentdir, '\');
    labels{i} = parentdir;
end

% Convert labels to categorical array
uniqueLabels = unique(labels);
categoricalLabels = categorical(labels, uniqueLabels);

% Assign categorical labels to datastore
ads.Labels = categoricalLabels;

%% Check labels
uniqueLabels = cellstr(unique(ads.Labels));
numLabels = numel(uniqueLabels);
countEachLabel(ads)

%% Create label-vector map

label_map = containers.Map();
for i = 1:numLabels
    label_vec = zeros(numLabels, 1);
    label_vec(i) = 1;
    label_map(uniqueLabels{i}) = label_vec;
end

label_map("Conn5BNYS")

%% MFCC for one sample
for i = 1:1%length(audioFiles)
    % Load the audio file
    audioFile = fullfile(chosenFolder, audioFiles(i).name);
    [audio, fs] = audioread(audioFile);
   
    % mfcc
    [coeffs1,delta,deltaDelta,loc] = mfcc(audio,fs);
    mfcc(audio,fs)

    win = hann(1024,"periodic");
    S = stft(audio,"Window",win,"OverlapLength",512,"Centered",false);

    coeffs = mfcc(S,fs,"LogEnergy","Ignore");


    % plot
    t = (0:size(audio,1)-1)/fs;
    sound(audio,fs)
    figure;
    plot(t,audio)
    xlabel("Time (s)")
    ylabel("Amplitude")
    title("Sample Utterance from Training Set")

    % plot MFCCs
    nbins = 60;
    coefficientToAnalyze = 4;

    figure;
    histogram(coeffs(:,coefficientToAnalyze+1),nbins,"Normalization","pdf")
    title(sprintf("Coefficient %d",coefficientToAnalyze))

    % get FT data
    [~,~,f_tpt,TPT_Fourier]=FTwav(audioFile);

    %plot Fourier transform
    figure;
    [~, filename, ~] = fileparts(audioFile);
    plot(f_tpt,abs(TPT_Fourier),'DisplayName',filename)
    xlim([0 7000])
    xlabel('Frequency (Hz)')
    ylabel('Magnitude')
    title('Fourier Transform')    
    legend
end

%% Compute all MFCCs
% Initialize empty arrays to store data and targets
MFCC_data = [];
MFCC_targets = [];

% Loop through each file in the audioDatastore
for i = 1:numel(ads.Files)
    % Read in the next audio file
    [audio,audioInfo] = read(ads);
    audio=audio(:,1); %look at only the left channel
    fs = audioInfo.SampleRate;

    % mfcc
    win = hann(1024,"periodic");
    S = stft(audio,"Window",win,"OverlapLength",512,"Centered",false);
    coeffs = mfcc(S,fs,"LogEnergy","Ignore");
    % Reshape the MFCC coefficients into a column vector and append to the MFCC data array
    MFCC_data = [MFCC_data, reshape(coeffs,[],1)];

    % Append the label to the targets array
    MFCC_targets = [MFCC_targets, label_map(string(ads.Labels(i)))];
       
end

reset(ads)
disp("Done")


%% NN time!

% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created 26-Feb-2023 20:22:11
%
% This script assumes these variables are defined:
%
%   MFCC_data - input data.
%   MFCC_targets - target data.

x = MFCC_data;
t = MFCC_targets;

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.

% Create a Pattern Recognition Network
hiddenLayerSize = 20;
net = patternnet(hiddenLayerSize, trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)
tind = vec2ind(t);
yind = vec2ind(y);
percentErrors = sum(tind ~= yind)/numel(tind);

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotconfusion(t,y)
%figure, plotroc(t,y)

%% Function to FT the contents of wav files
function [y, fs, fReturn, Fourier]=FTwav(fname)
    [y,fs] = audioread(fname);
    Fourier = fft(y); %This line performs a fourier transform on the flute sound file y-values
    Fourier=Fourier(1:end/2); %This line grabs the first half of the Fourier results
    fReturn = (0:length(y)-1)*fs/length(y); %This line generates a vector of frequencies the Fourier transform checks on
    fReturn = fReturn(1:end/2); %Again we grab only the first half for our plot.
end
